- name: upgrade all packages
  yum: name=* state=latest

- name: Check for reboot hint.
  shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
  ignore_errors: true
  register: reboot_hint

- name: Rebooting ...
  command: shutdown -r now "Reboot required for updated kernel"
  async: 0
  poll: 0
  sudo: true
  ignore_errors: true
  when: reboot_hint.stdout.find("reboot") != -1
  register: rebooting

- name: Wait for thing to reboot...
  pause: seconds=90
  when: rebooting is changed

- name: setup aws credentials dir for python
  shell: mkdir ~/.aws
  args:
    warn: false # set warn=false to prevent warning
  become: true
  become_user: ec2-user

- name: create ~/.aws/config
  copy:
    content: ""
    dest: ~/.aws/config
    force: no
    mode: 0666
  become: true
  become_user: ec2-user

- name: create ~/.aws/credentials
  copy:
    content: ""
    dest: ~/.aws/credentials
    force: no
    mode: 0666
  become: true
  become_user: ec2-user

- name: setup aws credentials user for python
  lineinfile:
    dest: ~/.aws/credentials
    line: '{{ item }}'
  with_items:
    - '[paul]'
    - 'aws_access_key_id={{ aws_access_key }}'
    - 'aws_secret_access_key={{ aws_secret_key }}'
    - '[default]'
    - 'aws_access_key_id={{ aws_access_key }}'
    - 'aws_secret_access_key={{ aws_secret_key }}'
  become: true
  become_user: ec2-user

- name: setup aws credentials IAM role for python
  lineinfile:
    dest: ~/.aws/config
    line: '{{ item }}'
  with_items:
    - '[default]'
    - 'region={{ region_id }}'
    - '[profile terraform]'
    - 'role_arn={{ arn_for_terraform_iam_role }}'
    - 'source_profile=paul'
    - 'region={{ region_id }}'
  become: true
  become_user: ec2-user

- name: install packages
  yum:
    name:
     - "unzip"
     - "wget"
     - "ca-certificates"
     - "zip"
     - "net-tools"
     - "tar"
     - "nmap-ncat"
     - "curl"
    state: present

- name: install Java 8
  yum:
    name: "java-1.8.0-openjdk"
    state: present

- name: pip install python dependencies
  pip:
    name:
      - "boto3"
      - "botocore"
      - "kazoo"
      - "paramiko"
    state: present

- name: move the vault installation scripts dir to the /tmp dir
  copy:
    src: ../files/install-vault
    dest: /tmp
    mode: u=rwx,g=rx,o=rx

- name: move the vault run scripts dir to the /tmp dir
  copy:
    src: ../files/run-vault
    dest: /tmp
    mode: u=rwx,g=rx,o=rx

- name: install vault using the copied bash and python scripts
  shell: /tmp/install-vault/install-vault --version {{ vault_version }} --user ec2-user
  become: true
  become_user: root

- name: move the vault certs dir to the /opt/vault dir
  copy:
    src: ../files/tls
    dest: /opt/vault

- name: change ownership of the certs
  shell: chown ec2-user:ec2-user /opt/vault/tls/*
  args:
    warn: false # set warn=false to prevent warning

- name: change permission of the certs
  shell: chmod 600 /opt/vault/tls/*
  args:
    warn: false # set warn=false to prevent warning

- name: move the update-certificate-store dir to the /tmp dir
  copy:
    src: ../files/update-certificate-store
    dest: /tmp
    mode: u=rwx,g=rx,o=rx

- name: install the certs into OS trust store
  shell: /tmp/update-certificate-store/update-certificate-store --cert-file-path /opt/vault/tls/ca.crt.pem
  become: true
  become_user: root

- name: move the consul installation scripts dir to the /tmp dir
  copy:
    src: ../files/install-consul
    dest: /tmp
    mode: u=rwx,g=rx,o=rx

- name: move the consul run scripts dir to the /tmp dir
  copy:
    src: ../files/run-consul
    dest: /tmp
    mode: u=rwx,g=rx,o=rx

- name: move the dnsmasq installation scripts dir to the /tmp dir
  copy:
    src: ../files/install-dnsmasq
    dest: /tmp
    mode: u=rwx,g=rx,o=rx

- name: install consul using the copied bash and python scripts
  shell: /tmp/install-consul/install-consul --version {{ consul_version }} --user ec2-user
  become: true
  become_user: root

- name: install dnsmasq using the copied bash and python scripts
  shell: /tmp/install-dnsmasq/install-dnsmasq
  become: true
  become_user: root
