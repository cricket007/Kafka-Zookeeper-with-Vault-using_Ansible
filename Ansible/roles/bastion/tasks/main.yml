# roles/bastion/tasks/main.yml
- name: upgrade all packages
  yum: name=* state=latest

- name: Check for reboot hint.
  shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
  ignore_errors: true
  register: reboot_hint

- name: Rebooting ...
  command: shutdown -r now "Reboot required for updated kernel"
  async: 0
  poll: 0
  sudo: true
  ignore_errors: true
  when: reboot_hint.stdout.find("reboot") != -1
  register: rebooting

- name: Wait for thing to reboot...
  pause: seconds=45
  when: rebooting is changed

- name: setup aws credentials dir for python
  shell: mkdir ~/.aws
  become: true
  become_user: ec2-user
  args:
    warn: false # set warn=false to prevent warning

- name: create ~/.aws/config
  copy:
    content: ""
    dest: ~/.aws/config
    force: no
    mode: 0666
  become: true
  become_user: ec2-user

- name: create ~/.aws/credentials
  copy:
    content: ""
    dest: ~/.aws/credentials
    force: no
    mode: 0666
  become: true
  become_user: ec2-user

- name: setup aws credentials user for python
  blockinfile:
    path: ~/.aws/credentials
    block: |
      [paul]
      aws_access_key_id={{ aws_access_key }}
      aws_secret_access_key={{ aws_secret_key }}
      [default]
      aws_access_key_id={{ aws_access_key }}
      aws_secret_access_key={{ aws_secret_key }}
  become: true
  become_user: ec2-user

- name: setup aws credentials IAM role for python
  blockinfile:
    path: ~/.aws/config
    block: |
      [default]
      region={{ region_id }}
      [profile terraform]
      role_arn={{ arn_for_terraform_iam_role }}
      source_profile=paul
      region={{ region_id }}
  become: true
  become_user: ec2-user

- name: install unzip
  yum:
    name: "unzip"
    state: present